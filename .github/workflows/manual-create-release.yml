name: (Manual) Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Release version (e.g., tf-1.2.3-ot-1.2.3-tg-1.2.3)
        required: true
        type: string

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install Task
        uses: arduino/setup-task@v2.0.0
        with:
          version: 3.x

      - name: Run linters
        run: task lint

  release:
    name: Release
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install Task
        uses: arduino/setup-task@v2.0.0
        with:
          version: 3.x

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ ! "$VERSION" =~ ^tf-[0-9]+\.[0-9]+\.[0-9]+-ot-[0-9]+\.[0-9]+\.[0-9]+-tg-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format. Use format: tf-1.2.3-ot-1.2.3-tg-1.2.3"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if version already exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git tag -l | grep -q "^${VERSION}$"; then
            echo "❌ Version $VERSION already exists"
            exit 1
          fi
          echo "✅ Version $VERSION is available"

      - name: Push respo tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "$VERSION"
          git push origin "$VERSION"

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: ${{ github.event.inputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v5
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: ${{ vars.DOCKER_ORG_NAME }}/${{ github.event.repository.name }}
          short-description: ${{ github.event.repository.description }}

  build-and-push:
    name: Build & push
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        flavour: [slim, plain, aws, azure, gcp, aws-azure, aws-gcp, azure-gcp, aws-azure-gcp]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install Task
        uses: arduino/setup-task@v2.0.0
        with:
          version: 3.x

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Install QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: tonistiigi/binfmt:latest
          platforms: amd64,arm64

      - name: Build and push
        env:
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
          DOCKER_BUILDKIT: 1
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TERM: xterm-256color
          VERSION: ${{ github.event.inputs.version }}
        run: |
          docker buildx create --use
          make login
          make push-${{ matrix.flavour }}
          docker pull ghcr.io/devops-infra/docker-terragrunt:${{ matrix.flavour }}-latest
          docker pull ghcr.io/devops-infra/docker-terragrunt:${{ matrix.flavour }}-tf-latest
          docker pull ghcr.io/devops-infra/docker-terragrunt:${{ matrix.flavour }}-ot-latest

      - name: Cont.Struc.Test - ${{ matrix.flavour }}
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ghcr.io/devops-infra/docker-terragrunt:${{ matrix.flavour }}-latest
          config: tests/${{ matrix.flavour }}.yml

      - name: Cont.Struc.Test - Terraform
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ghcr.io/devops-infra/docker-terragrunt:${{ matrix.flavour }}-tf-latest
          config: tests/tf.yml

      - name: Cont.Struc.Test - OpenTofu
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: ghcr.io/devops-infra/docker-terragrunt:${{ matrix.flavour }}-ot-latest
          config: tests/ot.yml
